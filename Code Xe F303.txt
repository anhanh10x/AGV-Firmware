  /* Includes ------------------------------------------------------------------*/
#include "main.h"
#include <string.h>

/*-----------------------------------Protocol-----------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
void Config_Motor_Pin(void);
void Config_Line_Sensor(void);
void Config_Timer2(void);
void Config_Timer3(void);
void Config_Timer1_PWM(void);
void Config_Encoder(void);
void Set_Duty_Right_Wheel(int Duty);
void Set_Duty_Left_Wheel(int Duty);
void Set_Direction_Left_Wheel();
void Set_Direction_Right_Wheel();
void Calculate_PID();
void Trigger_Pulse_Generate(void);
int8_t Read_Sensor_Values();
void DelayMicroSecond(uint16_t value);
void Config_Sonar_Pin(void);
void check_Distance(void);
void Config_GPIO_UART1 (void);
void Config_UART1();
void send_char();
void Control_Signal(void);

uint32_t cat_element (uint8_t x, uint8_t y);

//-----------------------------------------Macro----------------------------
#define Forward 1
#define Backward 0

/*------------------------------- Global variables---------------------- */
const int Pi = 3.14;
volatile int Pre_CNT_Value = 0; // save previous time when input capture at timer 3 channel 2
volatile int High_Time = 0; // duration of echo pulse
volatile int count_left = 0;
volatile int count_right = 0;
volatile int Count_Left_Check = 0;
volatile int Count_Right_Check = 0;
volatile float radiusOfWheel = 0.03;
float velocity_Left = 0;
float velocity_Right = 0;
float Distance = 100;
uint8_t state_Left = 1, state_Right = 1;
uint8_t state_Led = 1;

float forward_Velocity = 0;
float Ts = 0.05;
//wheel left and wheel right velocity
float v_right_ref =0, v_left_ref =0;
float Kp = 2.6, Ki = 0.05, Kd =0.10;
//error left
float e_left = 0, e1_left =0, e2_left =0;
//error right
float e_right = 0, e1_right =0, e2_right =0;
//angular velocity and pre-angular velocity
float w =0, w1 =0;
//post angle and pre-angle
float phi =0, phi1 = 0;
int PID_Left=0,Pre_PID_Left=0, PID_Right=0, Pre_PID_Right=0;
float P_Left =0, I_Left =0, D_Left =0;
float P_Right =0, I_Right =0, D_Right =0;
//Thong so xe
float L = 0.1; // khoang cach tu cam bien den truc banh sau
float b = 0.133; //khoang cach giua 2 banh
//Forward velocity
volatile uint32_t current_ControlSig = 0;
float section_Length = 0;
volatile uint8_t reciveNode = 0;
volatile uint8_t isCheckTimeToOpenSenSor = 0;
volatile float Test = 0;
//--------------------------------UART---------------------------------------
uint8_t tx_buff[22] = {0x7A, 0x16, 0x01, 0x0A, 0x00, 0x01, 0x28, 0x23, 0xFA, 0x05, 0x00, 0x08, 0x00, 0x2C, 0x04, 0xB5, 0x0D, 0xD4, 0x30, 0x93,0xFC, 0x7F};
volatile uint8_t rx_buff[60];
volatile uint8_t rx_test = 4;
/*DMA - UNUSED*/
#define RXSIZE 28
uint8_t RxBuff[28];
uint8_t MainBuff[50];
uint8_t indx = 0;
/*Index of receive data */
uint32_t index_rd;
volatile uint8_t i = 0;
volatile uint8_t count;
/* RFID */
volatile uint8_t count_RFID = 0;

volatile uint8_t isCountRFID  = 1;
volatile uint8_t isStop = 0;


// ------------------ Struct -----------------------
struct control_signal
{
	volatile uint32_t Node_ID;
	volatile uint32_t Speed;
	volatile uint32_t Section_Length;
	volatile uint32_t Action;
};
struct control_signal A[50];

/* ------------------------------Config Function--------------------------- */

void Config_Interrupt_RV(void)
{

	//Interrupt at PC13
	GPIOC->MODER &= ~(1<<27);
	GPIOC->MODER &= ~(1<<26);
	GPIOC->PUPDR |= (1<<19);
	GPIOC->PUPDR &= ~(1<<18);

	//Enable system clock
	RCC->APB2ENR |= 1<<0;

	//Enable interrupt at line 13 for PC13
	SYSCFG->EXTICR[3] |= 1<<5;
	SYSCFG->EXTICR[3] &= ~(1<<6) & ~(1<<4);

	//PC13 as Input pin, pulldown register
	GPIOC->MODER &= ~(0x3 << 13*2);
	GPIOC->PUPDR |= (1<<26);
	GPIOC->PUPDR &= ~(1<<27);

	//Enable interrupt at line 13
	EXTI->IMR |= (1 << 13);

	//Event: falling edge of pulse
	EXTI->RTSR &= ~(1 << 13); // disable interrupt when rising edge
	EXTI->FTSR |= (1 << 13); // enable interrupt when falling edge

	//Enable interrupt and priority
	NVIC_SetPriority(EXTI15_10_IRQn, 4);
	NVIC_EnableIRQ(EXTI15_10_IRQn);

}
void config_gpio_UART3(void)
{
	RCC -> APB1ENR |= (1 << 18);//enable the USART3 clock
	//PORT C CLOCK ENABLE
	RCC -> AHBENR |= (1 << 19);
	// Speed
	GPIOC -> OSPEEDR |= (3 << 20);
	GPIOC -> OSPEEDR |= (3 << 22);
	//Alternate function, CONFIG THE PC10 PC11 as alternate function.
	GPIOC -> MODER |= (2 << 20);
	GPIOC -> MODER |= (2 << 22);
	//Receive PULL UP PC11
	GPIOC -> PUPDR |= (1 << 22);
	GPIOC -> PUPDR &= ~(1 << 23);
	//Alternate function low register
	GPIOC -> AFR[1] |= (7 << 8);
	GPIOC -> AFR[1] |= (7 << 12);
}
void config_UART3 (void)
{
	//enable UASRT
		USART3 -> CR1 |= (1 << 0);
		//WORDLENGTH [28:12] [0:0] => 1 START bit 8 data bit
		USART3 -> CR1 &= ~(1 << 28);
		USART3 -> CR1 &= ~(1 << 12);
		//Transmit enable
		USART3 -> CR1 |= (1 << 3);
		//STOP BIT
		USART3 -> CR2 &= ~(1 << 13);
		USART3 -> CR2 &= ~(1 << 12);
		//OVERSAMPLLING
		USART3  -> CR1 &= ~(1 << 15);
		//BAUD RATE
		USART3 -> BRR = 833;
		//NON PARITY
		USART3 -> CR1 &= ~(1 << 10);
		//Receive Enable
		USART3 -> CR1 |= (1 << 2);

		//INTERUPT
		USART3 -> CR1 |= (1 << 5);

		NVIC_EnableIRQ(USART3_IRQn);

		NVIC_SetPriority(USART3_IRQn, 4);
}

void Config_GPIO_UART1 (void)
{   /*CLOCK*/
	//USART1 APB2, USART1 CLOCK ENABLE
	RCC -> APB2ENR |= (1 << 14);
	//PORT C CLOCK ENABLE
	RCC -> AHBENR |= (1 << 19);
	/*GPIO CONFIG*/
	// Speed
	GPIOC -> OSPEEDR |= (3 << 8);
	GPIOC -> OSPEEDR |= (3 << 10);
	//Alternate function, CONFIG THE PC4 PC5 as alternate function.
	GPIOC -> MODER |= (2 << 8);
	GPIOC -> MODER |= (2 << 10);
	//Receive PULL UP
	GPIOC -> PUPDR |= (1 << 10);
	GPIOC -> PUPDR &= ~(1 << 11);
	//Alternate function low register
	GPIOC -> AFR[0] |= (7 << 16);
	GPIOC -> AFR[0] |= (7 << 20);
}

void Config_UART1()
{
	//enable UASRT
	USART1 -> CR1 |= (1 << 0);
	//WORDLENGTH [28:12] [0:0] => 1 START bit 8 data bit
	USART1 -> CR1 &= ~(1 << 28);
	USART1 -> CR1 &= ~(1 << 12);
	//Transmit enable
	USART1 -> CR1 |= (1 << 3);
	//STOP BIT
	USART1 -> CR2 &= ~(1 << 13);
	USART1 -> CR2 &= ~(1 << 12);
	//OVERSAMPLLING
	USART1  -> CR1 &= ~(1 << 15);
	//BAUD RATE
	USART1 -> BRR = 833;
	//NON PARITY
	USART1 -> CR1 &= ~(1 << 10);
	//Receive Enable
	USART1 -> CR1 |= (1 << 2);

	// Enable USART1 interrupt
	USART1 -> CR1 |= (1 << 5);

	NVIC_EnableIRQ(USART1_IRQn);
	NVIC_SetPriority(USART1_IRQn, 3);
}

void Config_Sonar_Pin(void)
{
	//Config GPIOC, pin 10, output
	//Trigger for ultrasonic sensor
	GPIOC->MODER &= ~(1<<21);
	GPIOC->MODER |= (1<<20);
	GPIOC->OSPEEDR |= (3<<20);
	GPIOC->OTYPER &= ~(1<<10);

	// Config PA1
	GPIOA->MODER |= (1<<3);
	GPIOA->MODER &= ~(1<<2);
	GPIOA->PUPDR |= (1<<3);
	GPIOA->PUPDR &= ~(1<<2);

	// PA1 configured as AF1: TIM2_CH2
	GPIOA->AFR[0] &= ~(1<<7);
	GPIOA->AFR[0] &= ~(1<<6);
	GPIOA->AFR[0] &= ~(1<<5);
	GPIOA->AFR[0] |= 1<<4;

	//CC2 channel is configured as input, IC2 is mapped on TI2
	TIM2->CCMR1 &= ~(1<<9);
	TIM2->CCMR1 |= 1<<8;

	// Rising edge first, channel 2
	TIM2->CCER &= ~(1<<5);

	//Enable timer 2 capture channel 2
	TIM2->CCER |= 1<<4;

	//Enable interrupt, channel 2
	TIM2->DIER |= 1<<2;

	//Enable input/compare capture 2
	TIM2->EGR |= 1<<2;
}

void Config_Motor_Pin(void)
{
	//Config GPIOB, pin 0, output
	//Pin which control forward rotation of left wheel
	GPIOB->MODER &= ~(1<<1);
	GPIOB->MODER |= (1<<0);
	GPIOB->OSPEEDR |= (3<<0);
	GPIOB->OTYPER &= ~(1<<0);

	//Config GPIOA, pin 4, output
	//Pin which control back rotation of left wheel
	GPIOA->MODER &= ~(1<<9);
	GPIOA->MODER |= (1<<8);
	GPIOA->OSPEEDR |= (3<<8);
	GPIOA->OTYPER &= ~(1<<4);

	//Config GPIOC, pin 1, output
	//Pin which control back rotation of right wheel
	GPIOC->MODER &= ~(1<<3);
	GPIOC->MODER |= (1<<2);
	GPIOC->OSPEEDR |= (3<<2);
	GPIOC->OTYPER &= ~(1<<1);

	//Config GPIOC, pin 0, output
	//Pin which control forward rotation of right wheel
	GPIOC->MODER &= ~(1<<1);
	GPIOC->MODER |= (1<<0);
	GPIOC->OSPEEDR |= (3<<0);
	GPIOC->OTYPER &= ~(1<<0);
}

void Config_Line_Sensor(void)
{
	//PC9 - s1, PB8 - s2, PB9 - s3, PC8 - s4, PC6 - s5 as input

	// Config PC9
	GPIOC->MODER &= ~(1<<19);
	GPIOC->MODER &= ~(1<<18);
	GPIOC->PUPDR |= (1<<19);
	GPIOC->PUPDR &= ~(1<<18);

	// Config PB8
	GPIOB->MODER &= ~(1<<17);
	GPIOB->MODER &= ~(1<<16);
	GPIOB->PUPDR |= (1<<17);
	GPIOB->PUPDR &= ~(1<<16);

	// Config PB9
	GPIOB->MODER &= ~(1<<19);
	GPIOB->MODER &= (1<<18);
	GPIOB->PUPDR |= (1<<19);
	GPIOB->PUPDR &= ~(1<<18);

	// Config PC8
	GPIOC->MODER &= ~(1<<17);
	GPIOC->MODER &= ~(1<<16);
	GPIOC->PUPDR |= (1<<17);
	GPIOC->PUPDR &= ~(1<<16);

	// Config PC6
	GPIOC->MODER &= ~(1<<13);
	GPIOC->MODER &= ~(1<<12);
	GPIOC->PUPDR |= (1<<13);
	GPIOC->PUPDR &= ~(1<<12);
}

void Config_Timer2(void)
{
	RCC->APB1ENR |= 1<<0; // Enable timer 2
	TIM2->PSC = 8000 - 1; //Divide system clock (f=8MHz) by 8 -> update frequency = 1M/s
	TIM2->ARR = 50 - 1 ; //Define timer overrun based on auto-reload-register to happen after 1s
	TIM2->CR1 |= (1 << 0); //Enable Timer 2 (CEN, bit0)

	//Enable timer 1 output compare channel 1
	TIM2->CCER &= ~1<<0;

	//Enable interrupt
	TIM2->DIER |= 1<<1;

	//MOE: Main output enable
	TIM2->BDTR|= TIM_BDTR_MOE;

	//Enable input/compare capture 1
	TIM2->EGR |= 1<<1;

	//Calculate velocity per 100ms
	TIM2->CCR1 = 48;

	//Priority level 2 for this event
    NVIC_SetPriority(TIM2_IRQn, 1);
    NVIC_EnableIRQ(TIM2_IRQn);
}

void Config_Timer3(void)
{
	RCC->APB1ENR |= 1<<1; // Enable timer 3
	TIM3->PSC = 8000-1; //Divide system clock (f=8MHz) by 8 -> update frequency = 1M/s
	TIM3->ARR = 6000; //Define timer overrun based on auto-reload-register to happen after 1s
	TIM3->CR1 &= ~(1 << 0); //Enable Timer 3 (CEN, bit0)
}

void Config_Timer1_PWM(void)
{
	// GPIOA clock enable
	RCC->AHBENR |= 1<<17;

	// Config PA8
	GPIOA->MODER |= (1<<17);
	GPIOA->MODER &= ~(1<<16);
	GPIOA->OTYPER &= ~(1<<8);

    // Config PA9
	GPIOA->MODER |= (1<<19);
	GPIOA->MODER &= ~(1<<18);
	GPIOA->OTYPER &= ~(1<<9);

	// PA9 configured as AF6: TIM1_CH2
	GPIOA->AFR[1] &= ~1<<7;
	GPIOA->AFR[1] |= 1<<6;
	GPIOA->AFR[1] |= 1<<5;
	GPIOA->AFR[1] &= ~1<<4;

	// PA8 configured as AF6: TIM1_CH1
	GPIOA->AFR[1] &= ~1<<3;
	GPIOA->AFR[1] |= 1<<2;
	GPIOA->AFR[1] |= 1<<1;
	GPIOA->AFR[1] &= ~1<<0;

    // TIM1 timer clock enable
    RCC->APB2ENR |= 1<<11;

    // Enable alternate function clock
    RCC->APB2ENR |= 1<<0;

    // Set Prescaler 8MHz to 1MHz
    TIM1->PSC = 8 - 1;;

    // Set period
    TIM1->ARR = 202 - 1; //

    // Start Timer, counter enable
    TIM1->CR1 |= 1<<0;

    //MOE: Main output enable
    TIM1->BDTR |= 1<<15;

    //Enable PWM mode 1
    TIM1-> CCMR1 |= (1<<6) | (1<<5);
    TIM1->CCMR1 &= ~(1<<4);

    //Enable PWM mode 2
    TIM1-> CCMR1 |= (1<<14) | (1<<13);
    TIM1->CCMR1 &= ~(1<<12);

    //Capture/Compare 2 output Polarity
    TIM1->CCER &= ~(1<<5);

    //Capture/Compare 2 output enable
    TIM1->CCER |= (1<<4);

    //Capture/Compare 1 output Polarity
    TIM1->CCER &= ~(1<<1);

    //Capture/Compare 1 output enable
    TIM1->CCER |= (1<<0);
}

void Config_Encoder(void)
{
	// Config PC3
	GPIOC->MODER |= (1<<7);
	GPIOC->MODER &= ~(1<<6);
	GPIOC->PUPDR |= (1<<7);
	GPIOC->PUPDR &= ~(1<<6);

	// Config PC2
	GPIOC->MODER |= (1<<5);
	GPIOC->MODER &= ~(1<<4);
	GPIOC->PUPDR |= (1<<5);
	GPIOC->PUPDR &= ~(1<<4);

	// PC3 configured as AF2: TIM1_CH4
	GPIOC->AFR[0] &= ~1<<15;
	GPIOC->AFR[0] &= ~1<<14;
	GPIOC->AFR[0] |= 1<<13;
	GPIOC->AFR[0] &= ~1<<12;

	// PC2 configured as AF2: TIM1_CH3
	GPIOC->AFR[0] &= ~1<<11;
	GPIOC->AFR[0] &= ~1<<10;
	GPIOC->AFR[0] |= 1<<9;
	GPIOC->AFR[0] &= ~1<<8;

	//CC3 channel is configured as input, IC3 is mapped on TI3
	TIM1->CCMR2 |= 1<<0;
	TIM1->CCMR2 &= ~(1<<1);

	//CC4 channel is configured as input, IC4 is mapped on TI4
	TIM1->CCMR2 |= 1<<8;
	TIM1->CCMR2 &= ~(1<<9);

	//Set filter 0011, channel 3
	TIM1->CCMR2 |= 1<<5 | 1<<4;
	TIM1->CCMR2 &= ~(1<<7) & ~(1<<6);

	//Set filter 0011, channel 4
	TIM1->CCMR2 |= 1<<13 | 1<<12;
	TIM1->CCMR2 &= ~(1<<15) & ~(1<<14);

	// Rising edge first, channel 3
	TIM1->CCER &= ~(1<<11);
	TIM1->CCER &= ~(1<<9);

	// Rising edge first, channel 4
	TIM1->CCER &= ~(1<<15);
	TIM1->CCER &= ~(1<<13);

	//Enable timer 1 capture channel 3
	TIM1->CCER |= 1<<8;

	//Enable timer 1 capture channel 4
	TIM1->CCER |= 1<<12;

	//Enable interrupt
	TIM1->DIER |= 1<<0;

	//Enable interrupt, channel 3
	TIM1->DIER |= 1<<3;

	//Enable interrupt, channel 4
	TIM1->DIER |= 1<<4;

	//Enable input/compare capture 3
	TIM1->EGR |= 1<<3;

	//Enable input/compare capture 4
	TIM1->EGR |= 1<<4;

	NVIC_SetPriority(TIM1_CC_IRQn, 2);
	NVIC_EnableIRQ(TIM1_CC_IRQn);
}

/*---------------------------------Interrupt Function----------------------------*/
//Encoder
void TIM1_CC_IRQHandler(void)
{
	if(TIM1->SR & (1<<3))
	{
		count_left ++;
		Count_Left_Check ++;
		TIM1->SR &= ~(1<<3);
	}
	else if(TIM1->SR & (1<<4))
	{
		count_right ++;
		Count_Right_Check++;
		TIM1->SR &= ~(1<<4);
	}
	TIM1->SR &= ~(1<<0);
}

void TIM2_IRQHandler(void)
{
	if(TIM2->SR & (1<<1))
	{
		velocity_Left = (float)count_left/16.7;
		count_left = 0;

		velocity_Right = (float)count_right/16.7;
		count_right = 0;

		TIM2->SR &= ~(1<<1);
	}

	//Sonar sensor
	if(TIM2->SR & 1<<2) //CC2IF: Capture/Compare 2 interrupt flag
	{
		if(TIM2->CCER & (1<<5))
		{
			// The duration is calculated from signal from trigg send and echo receive
			High_Time = TIM2->CCR2 - Pre_CNT_Value;
			Distance = High_Time*17.15;
			if(Distance > 150)
				Distance = 150;
			TIM2->SR &= ~(1<<2);
			TIM2->CCER &= ~(1<<5);
		}
		else
		{
			//GPIOC->ODR |= 1<<13;
			Pre_CNT_Value = TIM2->CCR2;
			TIM2->SR &= ~(1<<2);
			TIM2->CCER |= (1<<5);
		}
	}
	TIM2->SR &= ~(1<<0);
}

void USART3_IRQHandler (void)
{
	// check receive data at RDR
	if ((USART3 -> ISR & (1 << 5)))
	{
		 count_RFID++;
		 USART3 -> RQR |= (1 << 3);
		 if(isCountRFID == 1)
		 {
			 GPIOA->ODR ^= 1<<5;
			 current_ControlSig++;
			 Control_Signal();
			 TIM3->CNT = 0;
			 TIM3->CR1 |= (1 << 0); //Enable Timer 3
			 isCountRFID = 0;
			 isCheckTimeToOpenSenSor = 1;
		 }
	}
}
void EXTI15_10_IRQHandler(void)
{
	if(isStop == 1)
		isStop = 0;
	else
		isStop = 1;
	EXTI->PR |= 1<<13;
}


void USART1_IRQHandler (void)
{
	if ((USART1 -> ISR & (1 << 5))) //Check the status register for interrupt
	{
		volatile uint8_t temp = USART1 -> RDR;
		if (0 == i && 0x7A == temp) //start byte of frame
		{
			  rx_buff[i] = temp;
			  i++;
			  USART1 ->RQR |= (1<<3); //free the flag
		}
		else if (0 != i)
		{
		  rx_buff[i] = temp;
		  USART1 ->RQR |= (1<<3);
		  if (0x7F == rx_buff[i])
		  {
			  count = i;
			  i = 0;
			  GPIOA -> ODR |= 1 << 5;
			  for (index_rd = 0; index_rd < (uint8_t)(count/6); index_rd++)
			  {
				   A[index_rd].Node_ID = cat_element(rx_buff[4 + 6*index_rd], rx_buff[3 + 6*index_rd]);
				   //A[index_rd].Node_ID = cat_element(1, 0);
				   //A[i].Node_ID = rx_buff[2];
				   A[index_rd].Speed = rx_buff[5 + 6 * index_rd];
				   A[index_rd].Section_Length = cat_element(rx_buff[7 + 6*index_rd], rx_buff[6 + 6*index_rd]);
				   A[index_rd].Action = rx_buff[8 + 6 * index_rd];
				   //HAL_Delay(1000);
			  }
			  index_rd = 0;
			  count = 0;
			  Control_Signal();
			  return;
		  }
		  i++;
	  }
	}
}

/*---------------------------------Sub Function----------------------------*/
void send_char()
{
  for (int8_t i = 0; i < 22; ++i )
	{
		while (!(USART1 ->ISR & (1 << 6)));  // wait for the data to be transmitted

			//USART2 -> RQR |= (1 << 4);
			USART1 -> TDR = tx_buff[i]; //character to send
	        HAL_Delay(100);
	}
}
// Set duty cycle for right wheel
void Set_Duty_Right_Wheel(int Duty)
{
	TIM1->CCR2 =2*Duty;
}

// Set duty cycle for left wheel
void Set_Duty_Left_Wheel(int Duty)
{
	TIM1->CCR1 = 2*Duty;
}

void Set_Direction_Left_Wheel(int isForward)
{
	if(isForward)
	{
		GPIOA->ODR |= 1<<4;
		GPIOB->ODR &= ~1<<0;
	}
	else
	{
		GPIOB->ODR |= 1<<0;
		GPIOA->ODR &= ~1<<4;
	}
}

void Set_Direction_Right_Wheel(int isForward)
{
	//2 ---> 3
	if(isForward)
	{
		GPIOC->ODR |= 1<<1;
		GPIOC->ODR &= ~1<<0;

	}
	else
	{
		GPIOC->ODR &= ~1<<1;
		GPIOC->ODR |= 1<<0;
	}
}

void DelayMicroSecond(uint16_t value)
{
	TIM3->CNT = 0;
	while(TIM3->CNT <= value){}
	return;
}

int8_t Read_Sensor_Values()
{
	int8_t Line_Value_x = 0;

	if(state_Left == 1)
	{
		Line_Value_x |= ((~GPIOC->IDR & 1<<9) ? 1 : 0) << 4;
		Line_Value_x |= ((~GPIOB->IDR & 1<<8) ? 1 : 0) << 3;
	}
	if(state_Right ==1)
	{
		Line_Value_x |= ((~GPIOC->IDR & 1<<8) ? 1 : 0) << 1;
		Line_Value_x |= ((~GPIOC->IDR & 1<<6) ? 1 : 0) << 0;
	}
	Line_Value_x |= ((~GPIOB->IDR & 1<<9) ? 1 : 0) << 2;

	//case X X X X X
	if (Line_Value_x == 0xF )
		return 0;
	else if(Line_Value_x & 1<<4)
	{
		//case: X X 0 0 0
		if(Line_Value_x & 1<<3)
			return 45; //3
		// case: X 0 0 0 0
		else
			return 60; //4
	}
	else if(Line_Value_x & 1<<3)
	{
		//case: 0 X X 0 0
		if(Line_Value_x & 1<<2)
		{
			return 28; // 2
		}
		//case: 0 X 0 0 0
		else
			return 28; //1
	}
	else if(Line_Value_x & 1<<2 && Line_Value_x & 1<<1)
	{
		//case: 0 0 X X 0
			return -28;//-2
	}
	else if(Line_Value_x & 1<<1)
	{
		//case: 0 0 0 X X
		if(Line_Value_x & 1<<0)
			return -45; //-3
		//case: 0 0 0 X 0
		else
			return -28; //-1
	}
	//case: 0 0 0 0 X
	else if(Line_Value_x & 1<<0)
	{
		return -60; // -4
	}
	//case: 0 0 X 0 0
	else if(Line_Value_x & 1<<2)
		return 0;
	else
	{
		return 0;
	}
	//case: 0 0 0 0 0
	return 0;
}
void Calculate_PID()
{
	//Angular velocity
    phi = (float)Read_Sensor_Values()*3.14/180;

    if(phi == 0)
    {
    	v_left_ref = v_right_ref = forward_Velocity/0.1884;
    	Set_Direction_Left_Wheel(Forward);
    	Set_Direction_Right_Wheel(Forward);

    	if(phi1 > 0)
    	{
    		HAL_Delay(10);
    		Set_Duty_Left_Wheel(15);
    		HAL_Delay(10);
    	}
    	else if( phi1 < 0)
    	{
    		HAL_Delay(10);
    		Set_Duty_Right_Wheel(15);
    		HAL_Delay(10);
    	}
    }
    else
    {
    	if((phi - phi1)*phi > 0)
		{
    		 w = (phi)/(0.1/forward_Velocity) + 2.5*(phi-phi1)/(0.1/forward_Velocity);
			//Calculate reference velocity
			v_right_ref = (forward_Velocity*2+b*w)/(0.3768);
			v_left_ref = forward_Velocity/0.0942 - v_right_ref;

			if(v_right_ref < 0)
			{
				v_right_ref = -v_right_ref;
				Set_Direction_Left_Wheel(Forward);
				Set_Direction_Right_Wheel(Backward);
			}
			else if(v_left_ref < 0)
			{
				v_left_ref = -v_left_ref;
				Set_Direction_Left_Wheel(Backward);
				Set_Direction_Right_Wheel(Forward);
			}
			else{}
		}
    }
    phi1 = phi;
	//Error left
	e_left = (v_left_ref - velocity_Left);

	//Error right
	e_right = (v_right_ref - velocity_Right);

	//Pid for left
	P_Left = Kp * e_left;
	I_Left = Kp*Ts*(e_left/2 + e1_left + e2_left/2)*Ki;
	D_Left = Kd*Kp*(e_left - e1_left)/Ts;
	//Set PWM for left
	PID_Left = (int)(P_Left + I_Left + D_Left) + Pre_PID_Left;

	//Pid for right
	P_Right = Kp * e_right;
	I_Right = Kp*Ts*(e_right/2 + e1_right + e2_right/2)*Ki;
	D_Right = Kd*Kp*(e_right - e1_right)/Ts;
	//Set PWM for right
	PID_Right = (int)(P_Right + I_Right + D_Right) + Pre_PID_Right;

	//Check overflow
	if(PID_Left <0)
		PID_Left = 0;
	else if(PID_Left >100)
		PID_Left = 100;
	else{}

	if(PID_Right <0)
		PID_Right = 0;
	else if(PID_Right >100)
		PID_Right = 100;
	else{}

	//Set Duty
	Set_Duty_Left_Wheel(PID_Left);
	Set_Duty_Right_Wheel(PID_Right);

	//Set Error
	e2_left = e1_left;
	e1_left = e_left;
	Pre_PID_Left = PID_Left;

	e2_right = e1_right;
	e1_right = e_right;
	Pre_PID_Right = PID_Right;
}

void Trigger_Pulse_Generate(void)
{
	TIM2->CNT = 0;

	GPIOC->ODR |= 1<<10;
	HAL_Delay(5);
	GPIOC->ODR &= ~(1<<10);
}

float travelledDistance = 0;
float remainDistance = 0;
void check_Distance(void)
{
	//Test = (float)Count_Left_Check*471/8600;
	if(state_Left == 0)
	{
		travelledDistance = (float)Count_Right_Check*471/8600;
	}
	else
	{
		travelledDistance = (float)Count_Left_Check*471/8600;
	}
	remainDistance = section_Length - travelledDistance;

	if(remainDistance > (float)0)
	{
		if(remainDistance < (float)26)
		{
			//Test = A[current_ControlSig+1].Action;
			switch(A[current_ControlSig+1].Action)
			{
			//Stop
			case 0:
				state_Left = 1;
				state_Right = 1;
				break;
			//Forward
			case 1:
				state_Left = 0;
				state_Right = 0;
				break;
			//Right
			case 2:
				state_Left = 0;
				state_Right = 1;
				break;
			//Left
			case 3:
				state_Left = 1;
				state_Right = 0;
				break;
			//Rotate
			case 4:
				state_Left = 1;
				state_Right = 1;
				break;
			}
		}
		return;
	}
	else if(remainDistance < -4)
	{
		state_Left = 1;
		state_Right = 1;
		Count_Left_Check = Count_Right_Check = -(remainDistance+3)*8600/471;
		current_ControlSig++;
		isCheckTimeToOpenSenSor = 1;
		Control_Signal();
	}
}

uint32_t cat_element (uint8_t x, uint8_t y)
{
	uint32_t cat = x*256 + y;
	return cat;
}

void Control_Signal(void)
{
	GPIOA->ODR ^= 1<<5;
	Count_Left_Check = Count_Right_Check = 0;
	forward_Velocity = (float)A[current_ControlSig].Speed/100;
	section_Length = (float)A[current_ControlSig].Section_Length;
}

/*------------------------Main Function--------------------------------------*/

int main(void)
{
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  Config_Timer1_PWM();
  Config_Line_Sensor();
  Config_Interrupt_RV();
  Config_GPIO_UART1();
  config_gpio_UART3();
  Config_Motor_Pin();
  Config_Encoder();
  Config_Timer2();
  Config_Timer3();
  Config_Sonar_Pin();
  Config_UART1();
  config_UART3();

  /*Set_Duty_Left_Wheel(60);
  Set_Duty_Right_Wheel(60);
  Set_Direction_Left_Wheel(Backward);
  Set_Direction_Right_Wheel(Backward);*/
  //forward_Velocity = 0.2;
  while (1)
  {
	  //test = TIM3->CNT;
	  //HAL_Delay(30);
	  //Trigger_Pulse_Generate();

	  if(isStop == 1)
	  {
		  Set_Duty_Left_Wheel(0);
		  Set_Duty_Right_Wheel(0);
		  HAL_Delay(10);
		  continue;
	  }
	  check_Distance();
	  if(isCheckTimeToOpenSenSor)
	  {
		 if(current_ControlSig > 0)
		 {
			float checkDistance = 0;
			if(state_Right == 0)
				checkDistance = Count_Left_Check*471/8600;
			else
				checkDistance = Count_Right_Check*471/8600;

			if(checkDistance > 5)
			{
				state_Right = 1;
				state_Left = 1;
				isCheckTimeToOpenSenSor = 0;
			}
		 }
	  }
	  if(TIM3->CNT >= 500)
	  {
		  TIM3->CNT = 0;
		  isCountRFID  = 1;
		  TIM3->CR1 &= ~(1 << 0); //Enable Timer 3
	  }
	 /* if(Distance < 10)
	  {
		  Set_Duty_Left_Wheel(0);
		  Set_Duty_Right_Wheel(0);
		  continue;
	  }*/
	  Calculate_PID();
	  HAL_Delay(20);
  }
}


void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}

void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
